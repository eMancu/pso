;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Este archivo contiene macros para la definición de rutinas de interrupción en asm;
;y las llamadas que estas deben hacer a funciones en C                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%define PUSHAD_LEN 8*4

;Este macro se encarga de definir la entrada %1 que llama a la función
;%2 de C considerando que no hubo error code y el privilegio es 0
;El tercer parámetro es opcional y especifica el número de interrupción (default -1)
%macro isr_define_ep 2-3 -1
[GLOBAL %1]
[EXTERN %2]
  %1:
    cli
    pushad
    mov dword [error_num], %3

    ;llamamos a la rutina en C
    call %2

    mov dword [error_num], -1
    popad
    sti
    iret

%endmacro

;Este macro declara la llamada a debug_kernelpanic con los parámetros adecuados
;Considera que no hay código de error
;Recibe un nombre de etiqueta de la función y un número de error
;Además define la etiqueta de la función como global
%macro isr_dkp_e 2
[EXTERN %1_c]
[GLOBAL %1]
  %1:
;    xchg bx, bx
    cli;
    pushad;

    mov dword [error_num], %2 ; muevo el número de error a la variable global

    push dword [esp+PUSHAD_LEN+4*4]; org_ss;
    push dword [esp+PUSHAD_LEN+4*4]; org_esp;
    push dword [esp+PUSHAD_LEN+4*4]; eflags;
    push dword [esp+PUSHAD_LEN+4*4]; org_cs;
    push dword [esp+PUSHAD_LEN+4*4]; org_eip;
    push dword 0x0E; errcode;
    push eax;
    push ecx;
    push edx;
    push ebx;
    mov eax, esp
    add eax, 4*10+PUSHAD_LEN; Calculo el esp original en eax
    push eax;
    push ebp;
    push esi;
    push edi;
    push ss;
    push ds;
    push es;
    push fs;
    push gs;

    push esp; puntero a la estructura
    mov eax, esp
    add eax, 4*20+PUSHAD_LEN ;Obtengo en eax el inicio del stack actual
    mov ebx, [eax+4] ;Obtengo el cs original
    mov dx, cs
    and bx, 0x3
    and dx, 0x3
    cmp dx, bx
    jz %%no_priv_change
%%priv_change:
    push dword [eax+3*4] ;Pusheo el esp pusheado por la interrupcion
    jmp %%func_call
%%no_priv_change:
    push eax;Pusheo el esp calculado
%%func_call:
    call debug_kernelpanic

 ;   xchg bx,bx

    add esp, 4*21; borramos los push

    popad;
    sti;
    iret;

%endmacro


;Este macro declara la llamada a debug_kernelpanic con los parámetros adecuados
;Considera que sí hay código de error
;Recibe un nombre de etiqueta de la función y un número de error
;Además define la etiqueta de la función como global
%macro isr_dkp_E 2
[EXTERN %1_c]
[GLOBAL %1]
  %1:
  ;  xchg bx, bx
    cli;
    pushad;

    mov dword [error_num], %2 ; muevo el número de error a la variable global

    push dword [esp+PUSHAD_LEN+5*4]; org_ss;
    push dword [esp+PUSHAD_LEN+5*4]; org_esp;
    push dword [esp+PUSHAD_LEN+5*4]; eflags;
    push dword [esp+PUSHAD_LEN+5*4]; org_cs;
    push dword [esp+PUSHAD_LEN+5*4]; org_eip;
    push dword [esp+PUSHAD_LEN+5*4]; errcode;
    push eax;
    push ecx;
    push edx;
    push ebx;
    mov eax, esp
    add eax, 4*10+PUSHAD_LEN; Calculo el esp original en eax
    push eax;
    push ebp;
    push esi;
    push edi;
    push ss;
    push ds;
    push es;
    push fs;
    push gs;

    push esp; puntero a la estructura
    mov eax, esp
    add eax, 4*20+PUSHAD_LEN ;Obtengo en eax el inicio del stack actual
    mov ebx, [eax+8] ;Obtengo el cs original
    mov dx, cs
    and bx, 0x3
    and dx, 0x3
    cmp dx, bx
    jz %%no_priv_change
%%priv_change:
    push dword [eax+4*4] ;Pusheo el esp pusheado por la interrupcion
    jmp %%func_call
%%no_priv_change:
    push eax;Pusheo el esp calculado
%%func_call:
    call debug_kernelpanic

;    xchg bx,bx

    add esp, 4*21; borramos los push

    popad;
    add esp, 4; Retiro el errorcode
    sti;
    iret;

%endmacro
